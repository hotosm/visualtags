<%
def parse_element(element)
  values = element["values"] || nil
  if element.name == "combo" && element.children.length > 0 && values.nil?
    values = []
    element.each_element do |list_item |
      values << list_item["value"]
    end
    values = values.join(",")
  end

  ele = {"name"=> element.name, 
         "key"=> element["key"], "text" => element["text"],
        "value"=> element["value"], "values" => values,
        "default_value"=> element["default"], "link"=> element["href"]}
      
  ele.delete_if {|k,v| v == nil}  #remove any empty key values, it reduces JSON size
  
  ele
end

#parses an item and extracts the tag / form elements from it
def parse_item(item)
  elements = []
  item.each_element do | ce |
    element = {}
    element = parse_element(ce)
    if ce.name == "optional"
      optional_items = []
      ce.each_element do | opt |
        optional_items << parse_element(opt)
      end
      element["items"] = optional_items
    end
    elements << element
  end

  elements
end

#parses a child of an Item or Group.
#if it's a group, the child has children of its own
def parse_child(child)
  if child.name == "item" || child.name == "group"
    child_hash = {"name" => child["name"], "type" => child.name, "icon" => child["icon"], "geo_type" => child["type"] }
    child_hash["item"] = parse_item(child) if child.name == "item"
  end
  if child.name == "group" && child.children?
    child_hash["children"] = []
    child.children.each do | c |
      if c.name == "item" || c.name == "group"
        child_hash["children"] << parse_child(c)
      end
    end
  end

  child_hash
end

# Parses an XML element of either Item or Group
def parse_leaf(xml_leaf)
  if xml_leaf.name == "item" || xml_leaf.name == "group"
    leaf = {"name" => xml_leaf["name"], "type" => xml_leaf.name, "icon" => xml_leaf["icon"], "geo_type" => xml_leaf["type"] }
    leaf["item"] = parse_item(xml_leaf) if xml_leaf.name == "item"
  end
  if xml_leaf.name == "group" && xml_leaf.children?
    leaf["children"] = []
    xml_leaf.children.each do | c |
      if c.name == "item" || c.name == "group"
        leaf["children"] << parse_child(c)
      end
    end
  end

  leaf
end


if @collection.custom_preset
  tree_data = @collection.custom_preset
else
  xml_array = @collection.to_preset_array
  json_array = []
  xml_array.each do | xml_leaf |
    #p child
    #xml_leaf is a Group or an Item
    json_array << parse_leaf(xml_leaf)
  end
  json_array.join(",")
  
  tree_data = Oj.dump(json_array)
end

-%>
<script type="text/javascript">
  var data = <%= tree_data %>;

  $(function() {
    $('#tag_tree').tree({
      data: data,
      autoOpen: 0,
      dragAndDrop: <%= editable %>,
      selectable: true,
      useContextMenu: false,
      onCreateLi: function(node, $li) {
        // Add 'icon' span before title
        var icon="";
        if (node.icon){
          icon = "<img src='/icons/"+node.icon+"' width='32px' height='32px'  />";
        }else{
          icon = "<img src='/icons/styles/standard/empty.png' width='32px' height='32px' />";
        }
        $li.find('.jqtree-title').before('<span class="icon">'+icon+'</span>');

      },
      onCanMoveTo: function(moved_node, target_node, position) {
        if (position == "inside" && target_node.type =="item") {
          return false;
        } else {
          return true;
        }
      }


    }); //tree


    $('#tag_tree').bind(
    'tree.select',
      function(event) {
        if (event.node) {
          // node was selected
          var node = event.node;
          if (node.type != "item"){
            $("#tag_info").empty()
            return false;
          }
          //console.log(node)
          render_item_table(node);

          render_item_tree(node);

        }
        else {
          // event.node is null
          // a node was deselected
        }
      }//function(event)
  );  //select tree

  //renders the item form elements in the table
  function render_item_table(node){
    var item_elements =  node["item"]
    $("#tag_info").empty()
    $("#tag_info").append("<table id='item_table'>")
    $("#item_table").append("<tr id='ele_r'><th></th><th colspan=2 class='tag_header'>"+node['name']+"  ("+node['geo_type'] +")</th></tr>")
    var linky = null;
    $.each(item_elements, function(index, ele){
      if (ele.name == "link"){
        linky = ele
      }
      if (ele.name == "optional"){
        $("#item_table").append("<tr class='ele optional'><td colspan='3'>Optional Attributes: </td></tr>")
        $.each(ele.items, function(i, opt_ele){
          $("#item_table").append(render_ele(opt_ele));
        });
      }else{
        $("#item_table").append(render_ele(ele));
      }
    });
    //ADD Item link at end
    if (linky){
      $("#item_table").append("<br /><a href='"+linky.link+"'>More information link</a><br />")
    }
    $("#tag_info").append("</table>")
  }

  //renders the item form elements in a new tree
  function render_item_tree(node){
    var item_elements =  node["item"]

    $('#item_tree').tree({
      data: item_elements,
      autoOpen: 0,
      dragAndDrop: <%= editable %>,
      dragAndDrop: true,
      selectable: true,
      useContextMenu: false,
      onCreateLi: function(node, $li) {
        //$li.find('.jqtree-title').before('<span class="type">'+node.name+'</span>');
       
          $li.find('.jqtree-title').after(render_ele(node));
       
      },
      onCanMoveTo: function(moved_node, target_node, position) {
        if (position == "inside" && target_node.name !="optional") {
          return false;
        } else {
          return true;
        }
      }


    }); //tree
  }


    function render_ele(ele){
      var html = "<tr class='ele "+ ele.name + "' ><td class='type'>"+ele.name+"</td>"
      var ele_html = ""

      //defaults
      var value = typeof ele.value !== 'undefined' ? ele.value : ""
      var text = typeof ele.text !== 'undefined' ? ele.text : ""


      if (ele.name == "label") {
        ele_html = "<td colspan='3'>"+text+"</td>"
      }
      if (ele.name == "space"){
        ele_html = "<td></td>"
      }
      if (ele.name == "key"){
        
        ele_html = "<td>"+ele.key + "</td><td>"+value+"</td>"
      }
      if (ele.name == "text"){
        ele_html = "<td>"+text+"</td><td><input type='text' /></td>" 
      }
  
      //TODO display_values
      //TODO list_entries
  
      if (ele.name == "combo"){
        ele_html = "<td>"+text+"</td>" 
        ele_html += "<td><select>"
        if (ele.values){
          //console.log(ele.values)
          $.each(ele.values.split(","), function(index, option){
            ele_html +=  "<option value='"+ option +"'>"+ option +"</option>"
          });
        }
        ele_html += "</select></td>"
      }
      if (ele.name == "check"){
        ele_html = "<td><input type='checkbox' "
        if (ele.default_value == "on"){
          ele_html += "checked"
        }
        ele_html += " >" + text +"</td>"  //|| ele.key
      }
  
      //TODO multiselect
      //TODO role?
  
      html += ele_html + "</tr>"
      //console.log(html)
      return html
    }


  }); //jq function

</script>

