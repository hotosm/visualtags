<%
def parse_element(element)
  values = element["values"] || nil
  if element.name == "combo" && element.children.length > 0 && values.nil?
    values = []
    element.each_element do |list_item |
      values << list_item["value"]
    end
    values = values.join(",")
  end

  ele = {"name"=> element.name, 
         "key"=> element["key"], "text" => element["text"],
        "value"=> element["value"], "values" => values,
        "default_value"=> element["default"], "link"=> element["href"]}
      
  ele.delete_if {|k,v| v == nil}  #remove any empty key values, it reduces JSON size
  
  ele
end

#parses an item and extracts the tag / form elements from it
def parse_item(item)
  elements = []
  item.each_element do | ce |
    element = {}
    element = parse_element(ce)
    if ce.name == "optional"
      optional_items = []
      ce.each_element do | opt |
        optional_items << parse_element(opt)
      end
      element["children"] = optional_items
    end
    elements << element
  end

  elements
end

#parses a child of an Item or Group.
#if it's a group, the child has children of its own
def parse_child(child)
  if child.name == "item" || child.name == "group"
    child_hash = {"name" => child["name"], "type" => child.name, "icon" => child["icon"], 
                  "geo_type" => child["type"], "id" => rand(32**8).to_s(32) }
    child_hash["item"] = parse_item(child) if child.name == "item"
  end
  if child.name == "group" && child.children?
    child_hash["children"] = []
    child.children.each do | c |
      if c.name == "item" || c.name == "group"
        child_hash["children"] << parse_child(c)
      end
    end
  end

  child_hash
end

# Parses an XML element of either Item or Group
def parse_leaf(xml_leaf)
  if xml_leaf.name == "item" || xml_leaf.name == "group"
    leaf = {"name" => xml_leaf["name"], "type" => xml_leaf.name, "icon" => xml_leaf["icon"], 
            "geo_type" => xml_leaf["type"], "id" => rand(32**8).to_s(32) }
    leaf["item"] = parse_item(xml_leaf) if xml_leaf.name == "item"
  end
  if xml_leaf.name == "group" && xml_leaf.children?
    leaf["children"] = []
    xml_leaf.children.each do | c |
      if c.name == "item" || c.name == "group"
        leaf["children"] << parse_child(c)
      end
    end
  end

  leaf
end


if @collection.custom_preset
  tree_data = @collection.custom_preset
else
  xml_array = @collection.to_preset_array
  json_array = []
  xml_array.each do | xml_leaf |
    #p child
    #xml_leaf is a Group or an Item
    json_array << parse_leaf(xml_leaf)
  end
  json_array.join(",")
  
  tree_data = Oj.dump(json_array)
end

-%>
<script type="text/javascript">
  var data = <%= tree_data %>;

  $(function() {
    $('#tag_tree').tree({
      data: data,
      autoOpen: 0,
      dragAndDrop: <%= editable %>,
      selectable: true,
      useContextMenu: false,
      onCreateLi: function(node, $li) {
        // Add 'icon' span before title
        var icon="";
        if (node.icon){
          icon = "<img src='/icons/"+node.icon+"' width='32px' height='32px'  />";
        }else{
          icon = "<img src='/icons/styles/standard/empty.png' width='32px' height='32px' />";
        }
        $li.find('.jqtree-title').before('<span class="icon">'+icon+'</span>');

      },
      onCanMoveTo: function(moved_node, target_node, position) {
        if (position == "inside" && target_node.type =="item") {
          return false;
        } else {
          return true;
        }
      }


    }); //tree


    $('#tag_tree').bind(
    'tree.select',
      function(event) {
        if (event.node) {
          // node was selected
          var node = event.node;
          if (node.type != "item"){
            $("#tag_info").empty()
            return false;
          }
          render_item_tree(node);

        }
        else {
          // event.node is null
          // a node was deselected
        }
      }//function(event)
  );  //select tree



  //renders the item form elements in a new tree
  function render_item_tree(node){
    $('#item_tree_title').empty();
    $('#item_tree').tree('destroy')

    $('#item_tree_title').append("<span class='item_title'>"+ node['name']+"  ("+node['geo_type'] +")</span>");
    <% if editable == "true"  -%>
      $('#item_tree_title').append("<a id='save_item_tree' href='#'>Save Changes</a>");
      $('#save_item_tree').click(function(e){
        $('#item_tree').tree('selectNode', null);
        var data = $('#item_tree').tree('toJson');
       
        var json_data = JSON.parse(data)

        $('#tag_tree').tree('updateNode', node,
        {
          item: json_data
        }
      );
        var data = null;
        var json_data = null;
        var parent_item = null;
        return false;
      });
    <% end -%>
    
    var item_elements =  node["item"]

    $('#item_tree').tree({
      data: item_elements,
      autoOpen: 0,
      dragAndDrop: <%= editable %>,
      selectable: <%= editable %>,
      useContextMenu: false,
      onCanSelectNode: function(node) {
        if (node.name == "optional") {
          return false;
        }
        else {
          return true;
        }
      },
      onCreateLi: function(node, $li) {
        $li.find('.jqtree-title').after(render_ele(node));
      },
      onCanMoveTo: function(moved_node, target_node, position) {
        if (position == "inside" && target_node.name !="optional") {
          return false;
        } else {
          return true;
        }
      }


    }); //tree
  }

  function render_ele(ele){
    var html = "";
    var ele_html = "";

    //defaults
    var value = typeof ele.value !== 'undefined' ? ele.value : "";
    var text = typeof ele.text !== 'undefined' ? ele.text : "";
    if (ele.name == "link"){
      ele_html = "<span class='full'>"+ ele.link + "</span>"
    }
    if (ele.name == "label") {
      ele_html = "<span class='full'>"+text+"</span>";
    }
    if (ele.name == "space"){
      ele_html = "<span class='full'>&nbsp</span>";
    }
    if (ele.name == "key"){
      ele_html = "<span class='left'>"+ele.key + "</span><span class='right'>"+value+"</span>";
    }
    if (ele.name == "text"){
      ele_html = "<span class='left'>"+text+"</span><span class='right'><input type='text' /></span>" ;
    }

    //TODO display_values
    //TODO role?

    if (ele.name == "combo" || ele.name=="multiselect"){
      var multiple = "";
      var delimiter = ",";
      if (ele.name == "multiselect"){
        multiple = " multiple "
        delimiter = ";"
      };
      ele_html = "<span class='left'>"+text+"</span>" ;
      ele_html += "<span class='right'><select"+multiple+">";
      if (ele.values){
        $.each(ele.values.split(delimiter), function(index, option){
          ele_html +=  "<option value='"+ option +"'>"+ option +"</option>";
        });
      }
      ele_html += "</select></span>";
    }

    if (ele.name == "check"){
      ele_html = "<span class='full'><input type='checkbox' ";
      if (ele.default_value == "on"){
        ele_html += "checked";
      }
      ele_html += " >" + text +"</span>";
    }

    html += ele_html;
    //console.log(html)
    return html;
  }


}); //jq function

</script>

